org: ${env:SLS_ORG}
service: qubo-teacher-api

provider:
  name: aws
  runtime: python3.9
  iam:
    role: ${env:AWS_ROLE_ARN}
  stage: ${sls:stage}
  memorySize: 1024
  timeout: 29
  environment:
    SERVICE_NAME: qubo-teacher-api
    STAGE: ${self:provider.stage}

    # DynamoDB Tables
    TABLE_CLASSROOMS: ${self:provider.stage}-qubo-classroom-table
    TABLE_ASSIGNMENTS: ${self:provider.stage}-qubo-assignments-table
    TABLE_CUSTOM_LEVELS: ${self:provider.stage}-qubo-custom-levels-table
    TABLE_CUSTOM_QUESTIONS: ${self:provider.stage}-qubo-custom-questions-table
    TABLE_SESSIONS: ${self:provider.stage}-qubo-sessions-table
    TABLE_USERS: ${self:provider.stage}-qubo-auth-user-table

    # Token validation
    USER_SERVICE_NAME: qubo-auth-api
    VALIDATE_TOKEN_FUNCTION: validateToken

functions:
  # Assignments
  createAssignmentByTeacher:
    handler: Assignments/createAssignmentByTeacher.lambda_handler
    events:
      - http:
          path: assignments
          method: post
          cors: true

  getAssignmentsByClassroomId:
    handler: Assignments/getAssignmentsByClassroomId.lambda_handler
    events:
      - http:
          path: assignments
          method: get
          cors: true

  # Custom Levels
  createCustomLevel:
    handler: Assignments/createCustomLevel.lambda_handler
    events:
      - http:
          path: custom-levels
          method: post
          cors: true

  getCustomLevelById:
    handler: Assignments/getCustomLevelById.lambda_handler
    events:
      - http:
          path: custom-levels/{level_id}
          method: get
          cors: true

  getCustomLevelsByAssignmentId:
    handler: Assignments/getCustomLevelsByAssignmentId.lambda_handler
    events:
      - http:
          path: custom-levels/assignment/{assignment_id}
          method: get
          cors: true

  # Custom Questions
  createCustomQuestion:
    handler: Assignments/createCustomQuestion.lambda_handler
    events:
      - http:
          path: custom-questions
          method: post
          cors: true

  getQuestionById:
    handler: Assignments/getQuestionById.lambda_handler
    events:
      - http:
          path: questions/{question_id}
          method: get
          cors: true

  # Submissions
  submitCustomLevel:
    handler: Assignments/submitCustomLevel.lambda_handler
    events:
      - http:
          path: custom-levels/{level_id}/submit
          method: post
          cors: true

  getSubmissionsByLevelId:
    handler: Assignments/getSubmissionsByLevelId.lambda_handler
    events:
      - http:
          path: custom-levels/{level_id}/submissions
          method: get
          cors: true

  # Sessions and Results
  getSessionResultsById:
    handler: Assignments/getSessionResultsById.lambda_handler
    events:
      - http:
          path: sessions/{session_id}
          method: get
          cors: true

  getIncorrectQuestionsBySubmitId:
    handler: Assignments/getIncorrectQuestionsBySubmitId.lambda_handler
    events:
      - http:
          path: sessions/{submit_id}/incorrect-questions
          method: get
          cors: true

  # Questions within Levels
  getQuestionsByCustomLevelId:
    handler: Assignments/getQuestionsByCustomLevelId.lambda_handler
    events:
      - http:
          path: custom-levels/{level_id}/questions
          method: get
          cors: true

plugins:
  - serverless-python-requirements

resources:
  Resources:

    ClassroomsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_CLASSROOMS}
        AttributeDefinitions:
          - AttributeName: classroom_id
            AttributeType: S
        KeySchema:
          - AttributeName: classroom_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    AssignmentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_ASSIGNMENTS}
        AttributeDefinitions:
          - AttributeName: assignment_id
            AttributeType: S
          - AttributeName: classroom_id
            AttributeType: S
        KeySchema:
          - AttributeName: assignment_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: classroom_id-index
            KeySchema:
              - AttributeName: classroom_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    CustomLevelsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_CUSTOM_LEVELS}
        AttributeDefinitions:
          - AttributeName: level_id
            AttributeType: S
          - AttributeName: assignment_id
            AttributeType: S
        KeySchema:
          - AttributeName: level_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: assignment_id-index
            KeySchema:
              - AttributeName: assignment_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    CustomQuestionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_CUSTOM_QUESTIONS}
        AttributeDefinitions:
          - AttributeName: question_id
            AttributeType: S
        KeySchema:
          - AttributeName: question_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    SessionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_SESSIONS}
        AttributeDefinitions:
          - AttributeName: session_id
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: session_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: user_id-index
            KeySchema:
              - AttributeName: user_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
