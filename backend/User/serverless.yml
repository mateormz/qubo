org: ${env:SLS_ORG}
service: qubo-auth-api

provider:
  name: aws
  runtime: python3.9
  iam:
    role: ${env:AWS_ROLE_ARN}
  memorySize: 1024
  timeout: 29
  environment:

    # Tables
    TABLE_USERS: ${sls:stage}-qubo-auth-user-table
    TABLE_TOKENS: ${sls:stage}-qubo-tokens-table
    TABLE_CLASSROOMS: ${sls:stage}-qubo-classroom-table

    # Index
    INDEX_EMAIL_USERS: email-index

    # Service info
    SERVICE_NAME: qubo-auth-api
    STAGE: ${sls:stage}

    # Function names
    VALIDATE_TOKEN_FUNCTION: validateToken

functions:
  registerTeacher:
    handler: registerTeacher.lambda_handler
    events:
      - http:
          path: auth/register-teacher
          method: post
          cors: true

  login:
    handler: login.lambda_handler
    events:
      - http:
          path: auth/login
          method: post
          cors: true

  validateToken:
    handler: validateToken.lambda_handler
    events:
      - http:
          path: /token/validate
          method: post
          cors: true

  getUserById:
    handler: getUserById.lambda_handler
    events:
      - http:
          path: auth/users/get/{user_id}
          method: get
          cors: true

  createStudent:
    handler: createStudent.lambda_handler
    events:
      - http:
          path: auth/create-student
          method: post
          cors: true

  updateStudentSkin:
    handler: updateStudentSkin.lambda_handler
    events:
      - http:
          path: auth/student/update-skin
          method: post
          cors: true

  getStudentSkins:
    handler: getStudentSkins.lambda_handler
    events:
      - http:
          path: auth/student/skins
          method: get
          cors: true

resources:
  Resources:
    AuthUsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_USERS}
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_EMAIL_USERS}
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    TokensTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_TOKENS}
        AttributeDefinitions:
          - AttributeName: token
            AttributeType: S
        KeySchema:
          - AttributeName: token
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true